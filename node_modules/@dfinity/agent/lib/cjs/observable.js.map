{"version":3,"file":"observable.js","sourceRoot":"","sources":["../../src/observable.ts"],"names":[],"mappings":";;;;;;;;;AAIA,MAAa,UAAc,SAAQ,QAAQ;IAGzC;QACE,KAAK,EAAE,CAAC;;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,OAAO,IAAI,KAAK,CAAC,IAAI,EAAE;YACrB,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,uBAAA,MAAM,+CAAM,MAAZ,MAAM,EAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAClD,CAAC,CAAC;IACL,CAAC;IAMD,SAAS,CAAC,IAAwB;QAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,WAAW,CAAC,IAAwB;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;IACxE,CAAC;IAED,MAAM,CAAC,IAAO;QACZ,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC;CACF;AA1BD,gCA0BC;oFAfO,OAAU;IACd,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;AA0BH,MAAa,aAAc,SAAQ,UAAoB;IACrD;QACE,KAAK,EAAE,CAAC;;QACR,OAAO,IAAI,KAAK,CAAC,IAAI,EAAE;YACrB,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,uBAAA,MAAM,qDAAM,MAAZ,MAAM,EAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAClD,CAAC,CAAC;IACL,CAAC;IACD,GAAG,CAAC,OAAe;QACjB,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,CAAC,OAAe;QAClB,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,KAAK,CAAC,OAAe,EAAE,KAAiB;QACtC,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;IAClD,CAAC;CAIF;AAnBD,sCAmBC;6FAHO,OAAe;IACnB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import { AgentError } from './errors';\n\nexport type ObserveFunction<T> = (data: T) => void;\n\nexport class Observable<T> extends Function {\n  observers: ObserveFunction<T>[];\n\n  constructor() {\n    super();\n    this.observers = [];\n    return new Proxy(this, {\n      apply: (target, _, args) => target.#call(args[0]),\n    });\n  }\n\n  #call(message: T) {\n    this.notify(message);\n  }\n\n  subscribe(func: ObserveFunction<T>) {\n    this.observers.push(func);\n  }\n\n  unsubscribe(func: ObserveFunction<T>) {\n    this.observers = this.observers.filter(observer => observer !== func);\n  }\n\n  notify(data: T) {\n    this.observers.forEach(observer => observer(data));\n  }\n}\n\nexport type AgentLog =\n  | {\n      message: string;\n      level: 'warn' | 'info';\n    }\n  | {\n      message: string;\n      level: 'error';\n      error: AgentError;\n    };\n\nexport class ObservableLog extends Observable<AgentLog> {\n  constructor() {\n    super();\n    return new Proxy(this, {\n      apply: (target, _, args) => target.#call(args[0]),\n    });\n  }\n  log(message: string) {\n    this.notify({ message, level: 'info' });\n  }\n  warn(message: string) {\n    this.notify({ message, level: 'warn' });\n  }\n  error(message: string, error: AgentError) {\n    this.notify({ message, level: 'error', error });\n  }\n  #call(message: string) {\n    this.log(message);\n  }\n}\n"]}