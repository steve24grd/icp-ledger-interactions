{"version":3,"file":"management_service.js","sourceRoot":"","sources":["../../../src/canisters/management_service.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/**\n * This file is generated from the candid for asset management.\n * didc version: 0.3.6\n */\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport type bitcoin_address = string;\nexport type bitcoin_network = { mainnet: null } | { testnet: null };\nexport type block_hash = Uint8Array | number[];\nexport type canister_id = Principal;\nexport interface canister_settings {\n  freezing_threshold: [] | [bigint];\n  controllers: [] | [Array<Principal>];\n  memory_allocation: [] | [bigint];\n  compute_allocation: [] | [bigint];\n}\nexport interface change {\n  timestamp_nanos: bigint;\n  canister_version: bigint;\n  origin: change_origin;\n  details: change_details;\n}\nexport type change_details =\n  | {\n      creation: { controllers: Array<Principal> };\n    }\n  | {\n      code_deployment: {\n        mode: { reinstall: null } | { upgrade: null } | { install: null };\n        module_hash: Uint8Array | number[];\n      };\n    }\n  | { controllers_change: { controllers: Array<Principal> } }\n  | { code_uninstall: null };\nexport type change_origin =\n  | { from_user: { user_id: Principal } }\n  | {\n      from_canister: {\n        canister_version: [] | [bigint];\n        canister_id: Principal;\n      };\n    };\nexport type chunk_hash = Uint8Array | number[];\nexport interface definite_canister_settings {\n  freezing_threshold: bigint;\n  controllers: Array<Principal>;\n  memory_allocation: bigint;\n  compute_allocation: bigint;\n}\nexport type ecdsa_curve = { secp256k1: null };\nexport interface get_balance_request {\n  network: bitcoin_network;\n  address: bitcoin_address;\n  min_confirmations: [] | [number];\n}\nexport interface get_current_fee_percentiles_request {\n  network: bitcoin_network;\n}\nexport interface get_utxos_request {\n  network: bitcoin_network;\n  filter: [] | [{ page: Uint8Array | number[] } | { min_confirmations: number }];\n  address: bitcoin_address;\n}\nexport interface get_utxos_response {\n  next_page: [] | [Uint8Array | number[]];\n  tip_height: number;\n  tip_block_hash: block_hash;\n  utxos: Array<utxo>;\n}\nexport interface http_header {\n  value: string;\n  name: string;\n}\nexport interface http_response {\n  status: bigint;\n  body: Uint8Array | number[];\n  headers: Array<http_header>;\n}\nexport type millisatoshi_per_byte = bigint;\nexport interface node_metrics {\n  num_block_failures_total: bigint;\n  node_id: Principal;\n  num_blocks_total: bigint;\n}\nexport interface outpoint {\n  txid: Uint8Array | number[];\n  vout: number;\n}\nexport type satoshi = bigint;\nexport interface send_transaction_request {\n  transaction: Uint8Array | number[];\n  network: bitcoin_network;\n}\nexport interface utxo {\n  height: number;\n  value: satoshi;\n  outpoint: outpoint;\n}\nexport type wasm_module = Uint8Array | number[];\nexport default interface _SERVICE {\n  bitcoin_get_balance: ActorMethod<[get_balance_request], satoshi>;\n  bitcoin_get_balance_query: ActorMethod<[get_balance_request], satoshi>;\n  bitcoin_get_current_fee_percentiles: ActorMethod<\n    [get_current_fee_percentiles_request],\n    BigUint64Array | bigint[]\n  >;\n  bitcoin_get_utxos: ActorMethod<[get_utxos_request], get_utxos_response>;\n  bitcoin_get_utxos_query: ActorMethod<[get_utxos_request], get_utxos_response>;\n  bitcoin_send_transaction: ActorMethod<[send_transaction_request], undefined>;\n  canister_info: ActorMethod<\n    [{ canister_id: canister_id; num_requested_changes: [] | [bigint] }],\n    {\n      controllers: Array<Principal>;\n      module_hash: [] | [Uint8Array | number[]];\n      recent_changes: Array<change>;\n      total_num_changes: bigint;\n    }\n  >;\n  canister_status: ActorMethod<\n    [{ canister_id: canister_id }],\n    {\n      status: { stopped: null } | { stopping: null } | { running: null };\n      memory_size: bigint;\n      cycles: bigint;\n      settings: definite_canister_settings;\n      idle_cycles_burned_per_day: bigint;\n      module_hash: [] | [Uint8Array | number[]];\n    }\n  >;\n  clear_chunk_store: ActorMethod<[{ canister_id: canister_id }], undefined>;\n  create_canister: ActorMethod<\n    [\n      {\n        settings: [] | [canister_settings];\n        sender_canister_version: [] | [bigint];\n      },\n    ],\n    { canister_id: canister_id }\n  >;\n  delete_canister: ActorMethod<[{ canister_id: canister_id }], undefined>;\n  deposit_cycles: ActorMethod<[{ canister_id: canister_id }], undefined>;\n  ecdsa_public_key: ActorMethod<\n    [\n      {\n        key_id: { name: string; curve: ecdsa_curve };\n        canister_id: [] | [canister_id];\n        derivation_path: Array<Uint8Array | number[]>;\n      },\n    ],\n    {\n      public_key: Uint8Array | number[];\n      chain_code: Uint8Array | number[];\n    }\n  >;\n  http_request: ActorMethod<\n    [\n      {\n        url: string;\n        method: { get: null } | { head: null } | { post: null };\n        max_response_bytes: [] | [bigint];\n        body: [] | [Uint8Array | number[]];\n        transform:\n          | []\n          | [\n              {\n                function: [Principal, string];\n                context: Uint8Array | number[];\n              },\n            ];\n        headers: Array<http_header>;\n      },\n    ],\n    http_response\n  >;\n  install_chunked_code: ActorMethod<\n    [\n      {\n        arg: Uint8Array | number[];\n        wasm_module_hash: Uint8Array | number[];\n        mode:\n          | { reinstall: null }\n          | { upgrade: [] | [{ skip_pre_upgrade: [] | [boolean] }] }\n          | { install: null };\n        chunk_hashes_list: Array<chunk_hash>;\n        target_canister: canister_id;\n        sender_canister_version: [] | [bigint];\n        storage_canister: [] | [canister_id];\n      },\n    ],\n    undefined\n  >;\n  install_code: ActorMethod<\n    [\n      {\n        arg: Uint8Array | number[];\n        wasm_module: wasm_module;\n        mode:\n          | { reinstall: null }\n          | { upgrade: [] | [{ skip_pre_upgrade: [] | [boolean] }] }\n          | { install: null };\n        canister_id: canister_id;\n        sender_canister_version: [] | [bigint];\n      },\n    ],\n    undefined\n  >;\n  node_metrics_history: ActorMethod<\n    [{ start_at_timestamp_nanos: bigint; subnet_id: Principal }],\n    Array<{ timestamp_nanos: bigint; node_metrics: Array<node_metrics> }>\n  >;\n  provisional_create_canister_with_cycles: ActorMethod<\n    [\n      {\n        settings: [] | [canister_settings];\n        specified_id: [] | [canister_id];\n        amount: [] | [bigint];\n        sender_canister_version: [] | [bigint];\n      },\n    ],\n    { canister_id: canister_id }\n  >;\n  provisional_top_up_canister: ActorMethod<\n    [{ canister_id: canister_id; amount: bigint }],\n    undefined\n  >;\n  raw_rand: ActorMethod<[], Uint8Array | number[]>;\n  sign_with_ecdsa: ActorMethod<\n    [\n      {\n        key_id: { name: string; curve: ecdsa_curve };\n        derivation_path: Array<Uint8Array | number[]>;\n        message_hash: Uint8Array | number[];\n      },\n    ],\n    { signature: Uint8Array | number[] }\n  >;\n  start_canister: ActorMethod<[{ canister_id: canister_id }], undefined>;\n  stop_canister: ActorMethod<[{ canister_id: canister_id }], undefined>;\n  stored_chunks: ActorMethod<[{ canister_id: canister_id }], Array<chunk_hash>>;\n  uninstall_code: ActorMethod<\n    [\n      {\n        canister_id: canister_id;\n        sender_canister_version: [] | [bigint];\n      },\n    ],\n    undefined\n  >;\n  update_settings: ActorMethod<\n    [\n      {\n        canister_id: Principal;\n        settings: canister_settings;\n        sender_canister_version: [] | [bigint];\n      },\n    ],\n    undefined\n  >;\n  upload_chunk: ActorMethod<[{ chunk: Uint8Array | number[]; canister_id: Principal }], chunk_hash>;\n}\nexport declare const idlFactory: IDL.InterfaceFactory;\n"]}