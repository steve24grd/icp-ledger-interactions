"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockCanister = exports.MockCanister = void 0;
class MockCanister {
    constructor(mocks, fallback) {
        this.mocks = mocks;
        this.fallback = fallback;
    }
    call(method, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.mocks.hasOwnProperty(method)) {
                return this.mocks[method].apply(this, args);
            }
            if (this.fallback) {
                return this.fallback.call(method, ...args);
            }
            throw new Error(`Unmocked canister method: \`${method}\``);
        });
    }
}
exports.MockCanister = MockCanister;
function mockCanister(mocks, parent) {
    return new MockCanister(mocks, parent);
}
exports.mockCanister = mockCanister;
//# sourceMappingURL=mockCanister.js.map